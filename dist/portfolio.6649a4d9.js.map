{"mappings":"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","sources":["node_modules/compute-scroll-into-view/src/index.ts","node_modules/scroll-into-view-if-needed/es/index.js","node_modules/smooth-scroll-into-view-if-needed/es/index.js","src/scripts/categories.js"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = (window as unknown) as Window & {\n    visualViewport: visualViewport\n  }\n\n  const {\n    scrollMode,\n    block,\n    inline,\n    boundary,\n    skipOverflowHiddenElements,\n  } = options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = cursor.parentElement\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const {\n      height,\n      width,\n      top,\n      right,\n      bottom,\n      left,\n    } = frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll,\n          frame.scrollHeight - height + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll,\n          frame.scrollWidth - width + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n","import compute from 'compute-scroll-into-view';\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var targetIsDetached = !target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(targetIsDetached ? [] : compute(target, options));\n  }\n\n  if (targetIsDetached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\n\nexport default scrollIntoView;","import scrollIntoView from 'scroll-into-view-if-needed';\nvar memoizedNow;\n\nvar now = function now() {\n  if (!memoizedNow) {\n    memoizedNow = 'performance' in window ? performance.now.bind(performance) : Date.now;\n  }\n\n  return memoizedNow();\n};\n\nfunction step(context) {\n  var time = now();\n  var elapsed = Math.min((time - context.startTime) / context.duration, 1);\n  var value = context.ease(elapsed);\n  var currentX = context.startX + (context.x - context.startX) * value;\n  var currentY = context.startY + (context.y - context.startY) * value;\n  context.method(currentX, currentY);\n\n  if (currentX !== context.x || currentY !== context.y) {\n    requestAnimationFrame(function () {\n      return step(context);\n    });\n  } else {\n    context.cb();\n  }\n}\n\nfunction smoothScroll(el, x, y, duration, ease, cb) {\n  if (duration === void 0) {\n    duration = 600;\n  }\n\n  if (ease === void 0) {\n    ease = function ease(t) {\n      return 1 + --t * t * t * t * t;\n    };\n  }\n\n  var scrollable;\n  var startX;\n  var startY;\n  var method;\n  scrollable = el;\n  startX = el.scrollLeft;\n  startY = el.scrollTop;\n\n  method = function method(x, y) {\n    el.scrollLeft = Math.ceil(x);\n    el.scrollTop = Math.ceil(y);\n  };\n\n  step({\n    scrollable: scrollable,\n    method: method,\n    startTime: now(),\n    startX: startX,\n    startY: startY,\n    x: x,\n    y: y,\n    duration: duration,\n    ease: ease,\n    cb: cb\n  });\n}\n\nvar shouldSmoothScroll = function shouldSmoothScroll(options) {\n  return options && !options.behavior || options.behavior === 'smooth';\n};\n\nfunction scroll(target, options) {\n  var overrides = options || {};\n\n  if (shouldSmoothScroll(overrides)) {\n    return scrollIntoView(target, {\n      block: overrides.block,\n      inline: overrides.inline,\n      scrollMode: overrides.scrollMode,\n      boundary: overrides.boundary,\n      behavior: function behavior(actions) {\n        return Promise.all(actions.reduce(function (results, _ref) {\n          var el = _ref.el,\n              left = _ref.left,\n              top = _ref.top;\n          var startLeft = el.scrollLeft;\n          var startTop = el.scrollTop;\n\n          if (startLeft === left && startTop === top) {\n            return results;\n          }\n\n          return [].concat(results, [new Promise(function (resolve) {\n            return smoothScroll(el, left, top, overrides.duration, overrides.ease, function () {\n              return resolve({\n                el: el,\n                left: [startLeft, left],\n                top: [startTop, top]\n              });\n            });\n          })]);\n        }, []));\n      }\n    });\n  }\n\n  return Promise.resolve(scrollIntoView(target, options));\n}\n\nvar smoothScrollIntoView = scroll;\nexport default smoothScrollIntoView;","import scrollIntoView from 'smooth-scroll-into-view-if-needed';\n\nconst allCases = document.querySelectorAll(\".case-card\");\nconst casesContainer = document.querySelector(\".cases-section__grid\")\nconst allTags = document.querySelectorAll(\"[data-tag]\")\n\nfunction hideAllCases() {\n    allCases.forEach(el => {\n        el.remove()\n    })\n}\n\nfunction showAllCases() {\n    allCases.forEach(el => {\n        casesContainer.append(el)\n\n    })\n}\n\nfunction highlightActiveTag(tag) {\n    allTags.forEach(el => {\n        if (el.textContent === tag) {\n\n            el.classList.add(\"active\")\n        } else {\n            el.classList.remove(\"active\")\n        }\n    })\n}\n\nfunction showMatchingCases(tag) {\n    allCases.forEach(el => {\n        const tags = el.getAttribute(\"data-category\").split(\",\")\n\n        if (tags.includes(tag)) {\n            casesContainer.append(el)\n        }\n    })\n}\n\nfunction addTagToUrl(tag) {\n    const isPortfolioPage = window.location.href.includes('portfolio');\n\n    const host = window.location.origin;\n    const urlPath = host + '/portfolio.html?category=' + tag;\n    const pageTitle = 'Portfolio | ' + tag;\n    const html = document.body.innerHTML;\n\n    window.history.pushState({ html, pageTitle }, \"\", urlPath);\n    if (isPortfolioPage === false) {\n        window.location.reload()\n    }\n}\n\n\n\n\nfunction selectCategory(tag) {\n    addTagToUrl(tag)\n    highlightActiveTag(tag)\n    hideAllCases()\n\n\n    if (tag.toLowerCase() === 'all projects') {\n        showAllCases();\n        return\n    }\n\n    showMatchingCases(tag)\n}\n\nfunction detectTagInURL() {\n    if (window.location.href.includes('?category=')) {\n        const tag = window.location.href.split('?category=')[1];\n        const filter = document.querySelector(\".filter\")\n        selectCategory(tag)\n\n        scrollIntoView(filter, {\n            behavior: 'smooth',\n            scrollMode: 'if-needed',\n        })\n\n    }\n}\n\ndocument.body.addEventListener(\"click\", e => {\n    if (e.target.hasAttribute(\"data-tag\")) {\n        const tag = e.target.textContent;\n        selectCategory(tag)\n    }\n})\n\ndocument.addEventListener(\"DOMContentLoaded\", detectTagInURL)"],"names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","style","getComputedStyle","overflowY","overflowX","frame","ownerDocument","defaultView","frameElement","e","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","target","options","windowWithViewport","window","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","document","documentElement","frames","cursor","parentElement","push","body","viewportWidth","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","length","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","$7b733abba68e3f8a$var$isOptionsObject","Object","keys","$e755be04629454c5$var$memoizedNow","$7b733abba68e3f8a$export$2e2bcd8739ae039","targetIsDetached","contains","behavior","$134d2db53ed4b551$export$2e2bcd8739ae039","computeOptions","$7b733abba68e3f8a$var$getOptions","actions","canSmoothScroll","forEach","_ref","scroll","$7b733abba68e3f8a$var$defaultBehavior","$e755be04629454c5$var$now","performance","now","bind","Date","$e755be04629454c5$var$step","context","time","elapsed","startTime","duration","value","ease","currentX","startX","x","currentY","startY","y","method","requestAnimationFrame","cb","$e755be04629454c5$var$smoothScroll","x1","y1","scrollable","t","ceil","$e755be04629454c5$export$2e2bcd8739ae039","overrides","$e755be04629454c5$var$shouldSmoothScroll","Promise","all","reduce","results","startLeft","startTop","concat","resolve","$b6d172aa4e0c2909$var$allCases","querySelectorAll","$b6d172aa4e0c2909$var$casesContainer","querySelector","$b6d172aa4e0c2909$var$allTags","$b6d172aa4e0c2909$var$selectCategory","tag","isPortfolioPage","location","href","includes","urlPath","origin","pageTitle","html","innerHTML","history","pushState","reload","$b6d172aa4e0c2909$var$addTagToUrl","textContent","classList","add","remove","$b6d172aa4e0c2909$var$highlightActiveTag","toLowerCase","getAttribute","split","append","$b6d172aa4e0c2909$var$showMatchingCases","addEventListener","hasAttribute","filter"],"version":3,"file":"portfolio.6649a4d9.js.map"}